version: "3.8"
services:
  minio:
    image: minio/minio:latest
    command: server --console-address ":9001" /data/
    ports:
      - "9000:9000"
      - "9001:9001"
    env_file:
      - .env.local
    restart: on-failure
    volumes:
      - ./volumes/minio:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - thesis

  postgresWeb:
    image: postgres
    restart: always
    volumes:
      - ./volumes/webPgData:/var/lib/postgresql/data
    env_file:
      - .env.local
    ports:
      - "6000:5432"
    networks:
      - thesis
  pgAdmin:
    image: dpage/pgadmin4
    restart: always
    env_file:
      - .env.local
    ports:
      - "7000:7000"
    networks:
      - thesis

#    elastic:
#      image: elasticsearch:8.13.4
#      restart: always
#      ports:
#        - "9200:9200"
#      env_file:
#        - .env.local
#      environment:
#        - discovery.type=single-node
#        - bootstrap.memory_lock=true
#        - "ES_JAVA_OPTS=-Xms1g -Xmx1g"
#        - xpack.security.enabled=false
#        - xpack.ml.enabled=false
#        - action.destructive_requires_name=false
#      volumes:
#        - ./volumes/elasticData:/usr/share/elasticsearch/data
#      networks:
#        - thesis
#      ulimits:
#        memlock:
#          soft: -1
#          hard: -1
#    kibana:
#      image: kibana:8.13.4
#      restart: always
#      ports:
#        - "5601:5601"
#      env_file:
#        - .env.local
#      networks:
#        - thesis
#      depends_on:
#        - elastic

  webapplocal:
    build:
      context: .
      dockerfile: webappmicroservice/Dockerfile-local
    env_file:
      - ./webappmicroservice/.env.local
    volumes:
      - ./webappmicroservice:/app
    ports:
      - "3000:3000"
    networks:
      - thesis
  infrastructurelocal:
    build:
      context: .
      dockerfile: infrastructuremicroservice/Dockerfile-local
    volumes:
      - ./infrastructuremicroservice:/app
      - /var/run/docker.sock:/var/run/docker.sock
    ports:
      - "4000:4000"
    networks:
      - thesis

networks:
  thesis:
    driver: bridge
